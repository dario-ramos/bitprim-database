cmake_policy(VERSION 3.4)

# bitprim-database
#==============================================================================
project(bitprim-database
  VERSION 3.0.0
  LANGUAGES CXX C)
cmake_minimum_required(VERSION 3.4)

# Check for baseline language coverage in the compiler for the C++11 standard.
#------------------------------------------------------------------------------
set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Process options.
#==============================================================================
# Implement --with-tests and declare WITH_TESTS.
#------------------------------------------------------------------------------
option(WITH_TESTS "Compile with unit tests." ON)

# Implement --with-tools and declare WITH_TOOLS.
#------------------------------------------------------------------------------
option(WITH_TOOLS "Compile with tools." ON)

# Inherit --enable-shared and define BOOST_TEST_DYN_LINK.
#------------------------------------------------------------------------------
option(ENABLE_SHARED "" OFF)

# Check dependencies.
#==============================================================================
# Require Boost of at least version 1.56.0 and output ${boost_CPPFLAGS/LDFLAGS}.
#------------------------------------------------------------------------------
if (NOT ENABLE_SHARED)
  set(Boost_USE_STATIC_LIBS ON)
endif()
find_package(
  Boost 1.56.0 REQUIRED
  COMPONENTS unit_test_framework)

# Require bitprim-core of at least version 3.0.0 and output ${bitprim_core_CPPFLAGS/LIBS/PKG}.
#------------------------------------------------------------------------------
if (NOT TARGET bitprim-core)
  find_package(bitprim-core 3.0.0 REQUIRED)
endif()

# Set flags.
#==============================================================================
include(CheckCXXCompilerFlag)

function(_add_c_compile_flag _Flag _Var)
  check_cxx_compiler_flag(${_Flag} ${_Var})
  if (${_Var})
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${_Flag}" )
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${_Flag}" )
  endif()
endfunction()

function(_add_cxx_compile_flag _Flag _Var)
  check_cxx_compiler_flag(${_Flag} ${_Var})
  if (${_Var})
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${_Flag}" )
  endif()
endfunction()

function(_add_link_flag _Flag _Var)
  check_cxx_compiler_flag(${_Flag} ${_Var})
  if (${_Var})
    set(CMAKE_SHARED_LINKER_FLAGS "${CMAKE_SHARED_LINKER_FLAGS} ${_Flag}" )
    set(CMAKE_STATIC_LINKER_FLAGS "${CMAKE_STATIC_LINKER_FLAGS} ${_Flag}" )
  endif()
endfunction()

# Warn on all stuff.
#------------------------------------------------------------------------------
if (NOT MSVC)
  _add_c_compile_flag(-Wall _has_all_warning_flag)
else()
  _add_c_compile_flag(-W4 _has_all_warning_flag)
  add_definitions(-D_SCL_SECURE_NO_WARNINGS)
endif()

# Warn on extra stuff.
#------------------------------------------------------------------------------
if (NOT MSVC)
  _add_c_compile_flag(-Wextra _has_extra_warning_flag)
endif()

# Be really annoying.
#------------------------------------------------------------------------------
_add_c_compile_flag(-Wpedantic _has_pedantic_warning_flag)
if (_has_pedantic_warning_flag)
  _add_c_compile_flag(-pedantic _has_pedantic_flag)
endif()

# Conform to style.
#------------------------------------------------------------------------------
_add_cxx_compile_flag(-Wno-missing-braces _has_no_missing_braces_warning_flag)

# Conflict in stdlib under clang. Enabled in clang only.
#------------------------------------------------------------------------------
_add_cxx_compile_flag(-Wno-mismatched-tags _has_no_mismatched_tags_warning_flag)

# Clean up boost 1.55 headers. Enabled in gcc only.
#------------------------------------------------------------------------------
_add_c_compile_flag(-Wno-deprecated-declarations _has_no_deprecated_declarations_warning_flag)

# Protect stack.
#------------------------------------------------------------------------------
_add_link_flag(-fstack-protector _has_stack_protector_flag)

# Protect stack comprehensively.
#------------------------------------------------------------------------------
_add_link_flag(-fstack-protector-all _has_stack_protector_all_flag)

# Hide internal functions from external libs. Enabled in gcc only.
#------------------------------------------------------------------------------
_add_cxx_compile_flag(-fvisibility-hidden _has_visibility_hidden_flag)

# Hide inlines from external libs. Enabled in gcc only.
#------------------------------------------------------------------------------
_add_cxx_compile_flag(-fvisibility-inlines-hidden _has_visibility_inlines_hidden_flag)

# Build
#==============================================================================
# src/bitprim-database.la => ${libdir}
#------------------------------------------------------------------------------
set(MODE STATIC)
if (ENABLE_SHARED)
  set(MODE SHARED)
endif()

add_library(bitprim-database ${MODE}
  src/data_base.cpp
  src/settings.cpp
  src/databases/block_database.cpp
  src/databases/history_database.cpp
  src/databases/spend_database.cpp
  src/databases/stealth_database.cpp
  src/databases/transaction_database.cpp
  src/databases/unspent_database.cpp
  src/memory/accessor.cpp
  src/memory/allocator.cpp
  src/memory/memory_map.cpp
  src/mman-win32/mman.c
  src/mman-win32/mman.h
  src/primitives/record_list.cpp
  src/primitives/record_manager.cpp
  src/primitives/record_multimap_iterable.cpp
  src/primitives/record_multimap_iterator.cpp
  src/primitives/slab_manager.cpp
  src/result/block_result.cpp
  src/result/transaction_result.cpp)
target_include_directories(bitprim-database PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)

target_compile_definitions(bitprim-database PUBLIC -DBCD_STATIC)

target_link_libraries(bitprim-database bitprim-core)

# Group sources
file(GLOB_RECURSE headers
  RELATIVE ${CMAKE_CURRENT_LIST_DIR}
  include/*.h include/*.hpp)
target_sources(bitprim-database PRIVATE "${headers}")

get_target_property(sources bitprim-database SOURCES)
foreach (source ${sources})
  get_filename_component(group ${source} DIRECTORY)
  if (MSVC)
    string(REPLACE "/" "\\" group ${group})
  endif()
  source_group("${group}" FILES ${source})
endforeach()

# local: test/bitprim_database_test
#------------------------------------------------------------------------------
if (WITH_TESTS)
  add_executable(bitprim_database_test
    test/block_database.cpp
    test/data_base.cpp
    test/hash_table.cpp
    test/history_database.cpp
    test/main.cpp
    test/spend_database.cpp
    test/structure.cpp
    test/transaction_database.cpp
    test/unspent_database.cpp)
  if (ENABLE_SHARED)
    target_compile_definitions(bitprim_database_test PRIVATE -DBOOST_TEST_DYN_LINK)
  endif()
  target_link_libraries(bitprim_database_test bitprim-database)

  target_include_directories(bitprim_database_test SYSTEM PUBLIC ${Boost_INCLUDE_DIR})
  target_link_libraries(bitprim_database_test
    ${Boost_UNIT_TEST_FRAMEWORK_LIBRARY})

  enable_testing()
  set(_bitprim_tests database_tests hash_table_tests structure_tests data_base_tests)
  foreach (_test_name ${_bitprim_tests})
    add_test(
      NAME test.${_test_name}
      COMMAND bitprim_database_test
        --run_test=${_test_name}
        --show_progress=no
        --detect_memory_leak=0
        --report_level=no
        --build_info=yes)
  endforeach()
endif()

# local: tools/block_db/block_db
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.block_db
    tools/block_db/block_db.cpp)
  target_link_libraries(tools.block_db bitprim-database)
endif()

# local: tools/count_records/count_records
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.count_records
    tools/count_records/count_records.cpp)
  target_link_libraries(tools.count_records bitprim-database)
endif()

# local: tools/history_db/history_db
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.history_db
    tools/history_db/history_db.cpp)
  target_link_libraries(tools.history_db bitprim-database)
endif()

# local: tools/initchain/initchain
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.initchain_db
    tools/initchain/initchain.cpp)
  target_link_libraries(tools.initchain_db bitprim-database)
endif()

# local: tools/mmr_add_row/mmr_add_row
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.mmr_add_row
    tools/mmr_add_row/mmr_add_row.cpp)
  target_link_libraries(tools.mmr_add_row bitprim-database)
endif()

# local: tools/mmr_create/mmr_create
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.mmr_create
    tools/mmr_create/mmr_create.cpp)
  target_link_libraries(tools.mmr_create bitprim-database)
endif()

# local: tools/mmr_delete_last_row/mmr_delete_last_row
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.mmr_delete_last_row
    tools/mmr_delete_last_row/mmr_delete_last_row.cpp)
  target_link_libraries(tools.mmr_delete_last_row bitprim-database)
endif()

# local: tools/mmr_lookup/mmr_lookup
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.mmr_lookup
    tools/mmr_lookup/mmr_lookup.cpp)
  target_link_libraries(tools.mmr_lookup bitprim-database)
endif()

# local: tools/read_htdb_record_value/read_htdb_record_value
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.read_htdb_record_value
    tools/read_htdb_record_value/read_htdb_record_value.cpp)
  target_link_libraries(tools.read_htdb_record_value bitprim-database)
endif()
# local: tools/read_htdb_slab_value/read_htdb_slab_value
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.read_htdb_slab_value
    tools/read_htdb_slab_value/read_htdb_slab_value.cpp)
  target_link_libraries(tools.read_htdb_slab_value bitprim-database)
endif()

# local: tools/show_array/show_array
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.show_array
    tools/show_array/show_array.cpp)
  target_link_libraries(tools.show_array bitprim-database)
endif()

# local: tools/show_linked_records/show_linked_records
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.show_linked_records
    tools/show_linked_records/show_linked_records.cpp)
  target_link_libraries(tools.show_linked_records bitprim-database)
endif()

# local: tools/show_records/show_records
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.show_records
    tools/show_records/show_records.cpp)
  target_link_libraries(tools.show_records bitprim-database)
endif()

# local: tools/spend_db/spend_db
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.spend_db
    tools/spend_db/spend_db.cpp)
  target_link_libraries(tools.spend_db bitprim-database)
endif()

# local: tools/stealth_db/stealth_db
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.stealth_db
    tools/stealth_db/stealth_db.cpp)
  target_link_libraries(tools.stealth_db bitprim-database)
endif()

# local: tools/transaction_db/transaction_db
#------------------------------------------------------------------------------
if (WITH_TOOLS)
  add_executable(tools.transaction_db
    tools/transaction_db/transaction_db.cpp)
  target_link_libraries(tools.transaction_db bitprim-database)
endif()

# local: tools/unspent_db/unspent_db
#------------------------------------------------------------------------------
# if (WITH_TOOLS)
#   add_executable(tools.unspent_db
#     tools/unspent_db/unspent_db.cpp)
#   target_link_libraries(tools.unspent_db bitprim-database)
# endif()

# Install
#==============================================================================
install(TARGETS bitprim-database
  EXPORT bitprim-database
  ARCHIVE DESTINATION lib)

set(_bitprim_headers
  # include_bitcoin_HEADERS =
  bitcoin/database.hpp
  # include_bitcoin_database_HEADERS =
  bitcoin/database/data_base.hpp
  bitcoin/database/define.hpp
  bitcoin/database/settings.hpp
  bitcoin/database/version.hpp
  # include_bitcoin_database_databases_HEADERS =
  bitcoin/database/databases/block_database.hpp
  bitcoin/database/databases/history_database.hpp
  bitcoin/database/databases/spend_database.hpp
  bitcoin/database/databases/stealth_database.hpp
  bitcoin/database/databases/transaction_database.hpp
  bitcoin/database/databases/unspent_database.hpp
  # include_bitcoin_database_impl_HEADERS =
  bitcoin/database/impl/hash_table_header.ipp
  bitcoin/database/impl/record_hash_table.ipp
  bitcoin/database/impl/record_hash_table_set.ipp
  bitcoin/database/impl/record_multimap.ipp
  bitcoin/database/impl/record_row.ipp
  bitcoin/database/impl/record_row_set.ipp
  bitcoin/database/impl/remainder.ipp
  bitcoin/database/impl/slab_hash_table.ipp
  bitcoin/database/impl/slab_row.ipp
  # include_bitcoin_database_memory_HEADERS =
  bitcoin/database/memory/accessor.hpp
  bitcoin/database/memory/allocator.hpp
  bitcoin/database/memory/memory.hpp
  bitcoin/database/memory/memory_map.hpp
  # include_bitcoin_database_primitives_HEADERS =
  bitcoin/database/primitives/hash_table_header.hpp
  bitcoin/database/primitives/record_hash_table.hpp
  bitcoin/database/primitives/record_hash_table_set.hpp
  bitcoin/database/primitives/record_list.hpp
  bitcoin/database/primitives/record_manager.hpp
  bitcoin/database/primitives/record_multimap.hpp
  bitcoin/database/primitives/record_multimap_iterable.hpp
  bitcoin/database/primitives/record_multimap_iterator.hpp
  bitcoin/database/primitives/slab_hash_table.hpp
  bitcoin/database/primitives/slab_manager.hpp
  # include_bitcoin_database_result_HEADERS =
  bitcoin/database/result/block_result.hpp
  bitcoin/database/result/transaction_result.hpp)
foreach (_header ${_bitprim_headers})
  get_filename_component(_directory "${_header}" DIRECTORY)
  install(FILES "include/${_header}" DESTINATION "include/${_directory}")
endforeach()

# Export
#==============================================================================
include(CMakePackageConfigHelpers)

export(EXPORT bitprim-database
  FILE "${CMAKE_CURRENT_BINARY_DIR}/bitprim-databaseTargets.cmake")
export(PACKAGE bitprim-database)

if (UNIX)
  set(_config_package_location "lib/cmake")
elseif (WIN32)
  set(_config_package_location "cmake")
endif()

install(EXPORT bitprim-database
  FILE bitprim-databaseTargets.cmake
  DESTINATION ${_config_package_location})

configure_file(bitprim-databaseConfig.cmake.in
  "${CMAKE_CURRENT_BINARY_DIR}/bitprim-databaseConfig.cmake"
  @ONLY)

write_basic_package_version_file(
  "${CMAKE_CURRENT_BINARY_DIR}/bitprim-databaseConfigVersion.cmake"
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY AnyNewerVersion)

install(
  FILES
    "${CMAKE_CURRENT_BINARY_DIR}/bitprim-databaseConfig.cmake"
    "${CMAKE_CURRENT_BINARY_DIR}/bitprim-databaseConfigVersion.cmake"
  DESTINATION ${_config_package_location})
